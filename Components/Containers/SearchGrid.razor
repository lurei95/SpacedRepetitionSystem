@using Blazorise.DataGrid;
@using SpacedRepetitionSystem.Components.Commands;
@using SpacedRepetitionSystem.Components.Interaction;

@inherits CustomComponentBase
@typeparam TItem

<WaitSpinner Visible="WaitSpinnerVisible">
  <DataGrid TItem="TItem"
            Style="@Style"
            Class="Class"
            Data="Items"
            ShowPager="ShowPager"
            @bind-SelectedRow="SelectedItem"
            Editable="true"
            Striped="true"
            Bordered="true"
            RowSelectable="(item) => SelectionEnabled"
            Hoverable="true"
            PageSize="@PageSize">
    @if (EditCommand != null || DeleteCommand != null || NewCommand != null)
    {
      <DataGridCommandColumn TItem="TItem" Width="160px" HeaderCellClass="command-cell"
                             CellClass="@((item) => "command-cell")">
        <EditCommandTemplate>
          @if (EditCommand != null)
          {
            <Button Class="grid-edit-button column-button" CommandParameter="@context.Item" Command="EditCommand"></Button>
          }
        </EditCommandTemplate>
        <DeleteCommandTemplate>
          @if (DeleteCommand != null)
          {
            <Button Class="grid-delete-button column-button" CommandParameter="@context.Item" Command="DeleteCommand"></Button>
          }
        </DeleteCommandTemplate>
        <NewCommandTemplate>
          @if (NewCommand != null)
          {
            <Button Class="grid-new-button column-button" Command="NewCommand"></Button>
          }
        </NewCommandTemplate>
      </DataGridCommandColumn>
    }
    @Columns

    @if (EditCommand != null || DeleteCommand != null || NewCommand != null || ContextActions != null)
    {
      <DataGridColumn TItem="TItem" Width="60" HeaderCellClass="mobile-command-cell"
                      Field="@nameof(SpacedRepetitionSystem.Entities.Entities.IEntity.Id)"
                      Caption="" CellClass="@((item) => "mobile-command-cell")" Sortable="false">
        <DisplayTemplate>
          @{
            <div class="dropdown">
              <button class="btn context-menu-button" type="button" id="dropdownMenu2" data-toggle="dropdown" style="width:100%; font-weight:300;" aria-haspopup="true" aria-expanded="false">
                ...
              </button>
              <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenu2">
                @if (NewCommand != null)
                {
                  <div class="dropdown-header">@UIStrings.New</div>
                  <Button Command="@NewCommand" Class="dropdown-item"></Button>
                  <div class="dropdown-divider"></div>
                }
                @if (EditCommand != null || DeleteCommand != null)
                {
                  <div class="dropdown-header">@UIStrings.Edit</div>
                }
                @if (EditCommand != null)
                {
                  <Button Command="@EditCommand" Class="dropdown-item"></Button>
                }
                @if (DeleteCommand != null)
                {
                  <Button Command="@DeleteCommand" Class="dropdown-item"></Button>
                }
                @if (ContextActions != null)
                {
                  @ContextActions(context)
                }
              </div>
            </div>
          }
        </DisplayTemplate>
      </DataGridColumn>
    }
  </DataGrid>
</WaitSpinner>

<style>
  .context-menu-button {
    margin-bottom: 5px;
    border-width: 0px;
    border: none;
    height: 20px;
    margin-top: 0px;
    width: 100%;
    font-weight: 700 !important;
    font-size: 1.2rem;
    padding: 0px;
  }

  .mobile-command-cell {
    display: none;
  }

  @@media (max-width: 600px) {
    .command-cell {
      display: none;
    }

    .mobile-command-cell {
      display: table-cell !important;
      padding-top: 0px;
    }
  }
</style>

@code
{
  private TItem selectedItem;
  private List<TItem> items;

  /// <summary>
  /// Whether selection is enabled
  /// </summary>
  [Parameter]
  public bool SelectionEnabled { get; set; } = true;

  /// <summary>
  /// Whether the wait spinner is visible
  /// </summary>
  [Parameter]
  public bool WaitSpinnerVisible { get; set; }

  /// <summary>
  /// Command for editing an item
  /// </summary>
  [Parameter]
  public CommandBase EditCommand { get; set; }

  /// <summary>
  /// Command for deleting an item
  /// </summary>
  [Parameter]
  public CommandBase DeleteCommand { get; set; }

  /// <summary>
  /// Command for creating a new item
  /// </summary>
  [Parameter]
  public CommandBase NewCommand { get; set; }

  /// <summary>
  /// maximum items per page
  /// </summary>
  [Parameter]
  public int PageSize { get; set; }

  /// <summary>
  /// Whether the pager should be displayed
  /// </summary>
  [Parameter]
  public bool ShowPager { get; set; }

  /// <summary>
  /// The selected item
  /// </summary>
  [Parameter]
  public TItem SelectedItem
  {
    get => selectedItem;
    set
    {
      if (!items.Contains(value))
        value = default;

      if (!(value == null && selectedItem == null) && (value == null || selectedItem == null || !value.Equals(selectedItem)))
      {
        selectedItem = value;
        SelectedItemChanged.InvokeAsync(value);
      }
    }
  }

  /// <summary>
  /// Items to display in the grid
  /// </summary>
  [Parameter]
  public List<TItem> Items
  {
    get => items;
    set
    {
      items = value;
      if (items.Count == 0)
        SelectedItem = default;
    }
  }

  /// <summary>
  /// The Columns of the Grid
  /// </summary>
  [Parameter]
  public RenderFragment Columns { get; set; }

  /// <summary>
  /// The additional context actions for a data item (in mobile resulution)
  /// </summary>
  [Parameter]
  public RenderFragment<TItem> ContextActions { get; set; }

  /// <summary>
  /// Value changed event
  /// </summary>
  [Parameter]
  public EventCallback<TItem> SelectedItemChanged { get; set; }
}