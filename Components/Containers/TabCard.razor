@using SpacedRepetitionSystem.Components.Interaction;

@inherits CustomComponentBase

<div class="card flex-grow-0 fullsizeCard @Class" style="@Style">
  <div class="card-header bg-dark">
    <div class="row">
      <div class="col col-md-auto text-white title-col">
        @Title
      </div>
      <div class="col">
        @if (Tabs.Count > 0)
        {
          <ul class="nav nav-tabs card-header-tabs pull-left" id="myTab" role="tablist">
            @foreach (CardTab tab in Tabs)
            {
              <li class="nav-item">
                <a class="nav-link @(tab.IsSelected ? "active" : "text-white")" data-toggle="tab" role="tab" @onclick="() => Select(tab)">@tab.Title</a>
              </li>
            }
          </ul>
        }
      </div>
      <div class="d-flex justify-content-end mr-3">
        @HeaderButtons
      </div>
    </div>
  </div>
  <WaitSpinner Visible="@IsLoading">
    <div class="card-body scrollable @BodyClass" style="max-width: 100%; @BodyStyle">
      @if (SelectedTab != null)
      {
        @SelectedTab.ChildContent
      }
      else
        @ChildContent

    </div>
    @if (CardFooter != null)
    {
      <div class="card-footer">
        @CardFooter
      </div>
    }
  </WaitSpinner>
</div>

<CascadingValue Value=this>
  @CardTabs
</CascadingValue>

<style>
  .title-col {
    flex: 0 0 auto !important;
    width: auto !important;
  }
</style>

@code
{
  private CardTab selectedTab;

  /// <summary>
  /// Style for the body
  /// </summary>
  [Parameter]
  public string BodyStyle { get; set; }

  /// <summary>
  /// Classes for the body
  /// </summary>
  [Parameter]
  public string BodyClass { get; set; }

  /// <summary>
  /// Title of the Card
  /// </summary>
  [Parameter]
  public string Title { get; set; }

  /// <summary>
  /// Whther the waitspinner should be shown
  /// </summary>
  [Parameter]
  public bool IsLoading { get; set; }

  /// <summary>
  /// The tabs of the card
  /// </summary>
  [Parameter]
  public RenderFragment CardTabs { get; set; }

  /// <summary>
  /// The header button in the card
  /// </summary>
  [Parameter]
  public RenderFragment HeaderButtons { get; set; }

  /// <summary>
  /// The content of the card
  /// </summary>
  [Parameter]
  public RenderFragment ChildContent { get; set; }

  /// <summary>
  /// The footer of the card
  /// </summary>
  [Parameter]
  public RenderFragment CardFooter { get; set; }

  /// <summary>
  /// The selected tab
  /// </summary>
  public CardTab SelectedTab
  {
    get => selectedTab;
    set
    {
      if (selectedTab != null)
        selectedTab.IsSelected = false;
      selectedTab = value;
      selectedTab.IsSelected = true;
    }
  }

  /// <summary>
  /// The tabs of the card
  /// </summary>
  public List<CardTab> Tabs { get; } = new List<CardTab>();

  /// <summary>
  /// Links the child column with this datagrid.
  /// </summary>
  /// <param name="column">Column to link with this datagrid.</param>
  internal void Hook(CardTab tab)
  {
    Tabs.Add(tab);
    if (SelectedTab == null)
      SelectedTab = tab;
  }

  private void Select(CardTab tab)
  {
    if (!tab.IsSelected)
      SelectedTab = tab;
  }
}