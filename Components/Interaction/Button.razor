@using SpacedRepetitionSystem.Components.Commands;
@using SpacedRepetitionSystem.Components.ViewModels;

<ViewModelArea ViewModel="@Command">
  @if (Command?.IsVisible == true)
  {
    <button type="button"
            data-toggle="tooltip"
            title="@Command.ToolTip"
            @onclick="ButtonClicked"
            class="btn btn-lg btn-primary @ClassString"
            disabled="@(Command?.IsEnabled == false)"
            style="@Style">
      @if (!string.IsNullOrEmpty(Command.Icon))
      {
        <span class="@Command.Icon" style="@TextColorString" aria-hidden="true"></span>
      }

      @Command.CommandText
    </button>
  }
</ViewModelArea>

<style>
  .iconButton:hover {
    font-size: 1.1rem;
    background-color: transparent !important;
    border-color: transparent !important;
    padding: 0px;
    line-height: unset;
    margin-left: 10px;
    margin-right: 5px;
  }

  .iconButton {
    font-size: 1rem;
    background-color: transparent !important;
    border-color: transparent !important;
    padding: 0px;
    line-height: unset;
    margin-left: 10px;
    margin-right: 5px;
  }
</style>

@code
{
  private Command command;

  private string ClassString => (IsIconButton ? "iconButton" : " ") + (string.IsNullOrEmpty(Classes) ? "" : " ") + Classes;

  private string TextColorString => (!string.IsNullOrEmpty(TextColor) ? "color: " + TextColor + ";" : null);

  /// <summary>
  /// Parameter for executing the command
  /// </summary>
  [Parameter]
  public object CommandParameter { get; set; }


  /// <summary>
  /// Command of the button
  /// </summary>
  [Parameter]
  public Command Command
  {
    get => command;
    set
    {
      if (command != value)
      {
        command = value;
        RefreshUi();
      }
    }
  }

  /// <summary>
  /// Determinds whether the button is a Icon Button 
  /// </summary>
  [Parameter]
  public bool IsIconButton { get; set; }

  /// <summary>
  /// The Color of the text
  /// </summary>
  [Parameter]
  public string TextColor { get; set; }

  /// <summary>
  /// The style of the component
  /// </summary>
  [Parameter]
  public string Style { get; set; }

  /// <summary>
  /// Classes string
  /// </summary>
  [Parameter]
  public string Classes { get; set; }

  private void ButtonClicked()
  {
    if (Command != null)
      Command.ExecuteCommand(CommandParameter);
  }

  private void RefreshUi()
  { InvokeAsync(() => StateHasChanged()); }
}