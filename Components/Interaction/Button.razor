@using SpacedRepetitionSystem.Components.Commands;
@using SpacedRepetitionSystem.Components.ViewModels;
@using Microsoft.JSInterop;

@inherits SpacedRepetitionSystem.Components.CustomComponentBase
@inject IJSRuntime JSRuntime;

<ViewModelArea ViewModel="@Command">
  @if (IsVisible && Command?.IsVisible == true)
  {
    <button type="button" id="@Id"
            data-toggle="tooltip"
            title="@Command?.ToolTip"
            @onclick="ButtonClicked"
            class="btn @ClassString"
            disabled="@(Command?.IsEnabled == false)"
            style="@Style">
      @if (!string.IsNullOrEmpty(Command?.Icon))
      {
        <span class="@Command?.Icon" style="@TextColorString"></span>
      }

      @Command?.CommandText
    </button>
  }
</ViewModelArea>

@code
{
  private CommandBase command;

  private string ClassString => (IsIconButton ? "icon-button" : " ") + (string.IsNullOrEmpty(Class) ? "" : " ") + Class;

  private string TextColorString => (!string.IsNullOrEmpty(TextColor) ? "color: " + TextColor + ";" : null);

  /// <summary>
  /// Whether the button is visible
  /// </summary>
  [Parameter]
  public bool IsVisible { get; set; } = true;

  /// <summary>
  /// If the edit should be focued
  /// </summary>
  [Parameter]
  public bool IsFocued { get; set; }

  /// <summary>F
  /// Parameter for executing the command
  /// </summary>
  [Parameter]
  public object CommandParameter { get; set; }

  /// <summary>
  /// Command of the button
  /// </summary>
  [Parameter]
  public CommandBase Command
  {
    get => command;
    set
    {
      if (command != value)
      {
        command = value;
        RefreshUi();
      }
    }
  }

  /// <summary>
  /// Determinds whether the button is a Icon Button
  /// </summary>
  [Parameter]
  public bool IsIconButton { get; set; }

  /// <summary>
  /// The Color of the text
  /// </summary>
  [Parameter]
  public string TextColor { get; set; }

  private void ButtonClicked()
  {
    if (Command != null)
      Command.ExecuteCommand(CommandParameter);
  }

  private void RefreshUi()
  { InvokeAsync(() => StateHasChanged()); }

  ///<inheritdoc/>
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if (IsFocued)
      await JSRuntime.InvokeVoidAsync("utilities.focusElement", Id);
  }
}