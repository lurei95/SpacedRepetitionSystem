@using SpacedRepetitionSystem.Utility.Notification;

@inherits SpacedRepetitionSystem.Components.CustomComponentBase
@implements INotificationProvider

@if (alertVisible)
{
  <div class="@alertClass"
       style="@Style"
       id="@Id"
       role="alert">
    @message
    <button type="button" class="close" @onclick="ResetNotification">
      <span>&times;</span>
    </button>
  </div>
}

<style>
  .bottomBar {
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    margin-bottom: 0;
  }
</style>

@code
{
  private string alertClass;
  private string message;
  private bool alertVisible = false;

  ///<inheritdoc/>
  public void NotifyMessage(NotificationKind notificationKind, string message)
  {
    this.message = message;
    switch (notificationKind)
    {
      case NotificationKind.SuccessNotification:
        alertClass = "alert alert-success bottomBar " + Class;
        alertVisible = true;
        break;
      case NotificationKind.InformationNotification:
        alertClass = "alert alert-info bottomBar " + Class;
        alertVisible = true;
        break;
      case NotificationKind.WarningNotification:
        alertClass = "alert alert-warning bottomBar " + Class;
        alertVisible = true;
        break;
      case NotificationKind.ErrorNotification:
        alertClass = "alert alert-danger bottomBar " + Class;
        alertVisible = true;
        break;
      default:
        ResetNotification();
        break;
    }
    InvokeAsync(() => StateHasChanged());
  }

  ///<inheritdoc/>
  public void ResetNotification()
  {
    if (alertVisible)
    {
      alertVisible = false;
      alertClass = null;
      message = null;
      InvokeAsync(() => StateHasChanged());
    }
  }

  ///<inheritdoc/>
  protected override void OnInitialized()
  {
    base.OnInitialized();
    NotificationMessageProvider.Initialize(this, 5000);
  }
}