@page "/Login"

@using SpacedRepetitionSystem.ViewModels.Identity;
@using SpacedRepetitionSystem.Components.ViewModels;
@using SpacedRepetitionSystem.Components.Interaction;

@inherits PageBase<LoginViewModel>

<ViewModelArea ViewModel="ViewModel">
  <SpacedRepetitionSystem.Components.Interaction.WaitSpinner Visible="ViewModel.IsBusy">
    <div class="d-flex flex-column flex-grow-1 justify-content-center align-items-center">
      <EditForm Model="@ViewModel.User" OnValidSubmit="@ViewModel.SubmitAsync">
        <div class="login-container">
          <div>
            <h3 style="font-weight:bold; color:#343a40">Login</h3>
          </div>
          <div>
            <br/>
          </div>
          <div class="col-12 row">
            <input class="form-control col-12 @(ViewModel.HasEmailError ? "error-border" : null)" @bind="ViewModel.User.Email" placeholder="email address" />
          </div>
          <br />
          <div class="col-12 row">
            <input type="password" class="form-control col-12 @(ViewModel.HasPasswordError ? "error-border" : null)" @bind="ViewModel.User.Password" placeholder="password" />
          </div>
          <br/>
          <div class="col-12 row">
            <Button Class="col-12 btn-primary" Command="ViewModel.LoginAsGuestUserCommand" />
          </div>
          <br/>
          @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
          {
            <div class="col-12 row" style="text-align:left; font-weight:bold">
              <span class="col-12 wrong">@ViewModel.ErrorMessage</span>
            </div>
            <br/>
          }
          <hr class="mt-0"/>
          <div class="col-12 row d-flex align-items-center">
            <span class="col-12"></span>
            <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
            <a href="/Signup" class="col">Sign up</a>
          </div>
        </div>
      </EditForm>
    </div>
  </SpacedRepetitionSystem.Components.Interaction.WaitSpinner>
</ViewModelArea>

@code
{
  /// <summary>
  /// The athentication state task
  /// </summary>
  [CascadingParameter]
  public Task<AuthenticationState> AuthenticationStateTask { set => ViewModel.AuthenticationStateTask = value; }

  protected async override Task OnInitializedAsync()
  { await ViewModel.InitializeAsync(); }
}