@page "/Decks/{Id:long}/Practice/"

@using SpacedRepetitionSystem.Components.ViewModels.Cards;
@using SpacedRepetitionSystem.Components.Interaction;
@using SpacedRepetitionSystem.Components.ViewModels;

@inherits PageBase<PracticeDeckViewModel>
@inject IJSRuntime JSRuntime;

<ViewModelArea ViewModel="ViewModel">
  <div class="card flex-grow-0 fullsizeCard">
    <div class="card-header">
      <div class="row">
        <div class="col col-md-auto">
          @ViewModel?.Title
        </div>
        <div class="col d-flex justify-content-end">
          <Button Command="@ViewModel?.CloseCommand" IsIconButton="true" TextColor="#e74c3c"></Button>
        </div>
      </div>
    </div>
    <WaitSpinner Visible="IsLoading">
      <div class="card-body d-flex">
        @if (ViewModel.IsSummary)
        {
          <div class="d-flex flex-column flex-grow-1">
            <div class="d-flex flex-grow-1 flex-row">
              <ul class="list-group list-group-flush jus" style="width:100%">
                @foreach (var item in ViewModel.PracticeResults)
                {
                  <li class="list-group-item custom-li mt-2">
                    <div class="d-flex row justify-content-between">
                      <div class="d-flex col">
                        <label>Card - @item.Key</label>
                      </div>
                      <div class="d-flex justify-content-center ml-4 col">
                        <label class="right">@item.Value.Correct</label>
                      </div>
                      <div class="d-flex justify-content-center col">
                        <label class="hard">@item.Value.Difficult</label>
                      </div>
                      <div class="d-flex justify-content-center col">
                        <label class="wrong">@item.Value.Wrong</label>
                      </div>
                    </div>
                  </li>
                  @foreach (var subItem in item.Value.FieldResults)
                  {
                    <li class="list-group-item ml-4 custom-li">
                      <div class="d-flex row justify-content-between">
                        <div class="d-flex col">
                          <label>@subItem.Key</label>
                        </div>
                        <div class="d-flex justify-content-center col">
                          <label class="right">@subItem.Value.Correct</label>
                        </div>
                        <div class="d-flex justify-content-center col">
                          <label class="hard">@subItem.Value.Difficult</label>
                        </div>
                        <div class="d-flex justify-content-center col">
                          <label class="wrong">@subItem.Value.Wrong</label>
                        </div>
                      </div>
                    </li>
                  }
                }
              </ul>
            </div>
          </div>
        }
        else
        {
          <div class="d-flex mt-4 flex-column flex-grow-1">
            <div class="d-flex justify-content-center">
              <div style="font-size: 1.5rem" class="@ViewModel.ValidationClass">@(ViewModel.IsShowingSolution ? ViewModel.CurrentFieldName : ViewModel.DisplayedFieldName)</div>
            </div>
            <div class="d-flex justify-content-center">
              <div style="font-size: 3rem" class="@ViewModel.ValidationClass">@(ViewModel.IsShowingSolution ? ViewModel.Solution : ViewModel.DisplayedFieldValue)</div>
            </div>
            @if (!ViewModel.IsShowingSolution)
            {
              <div class="d-flex justify-content-center flex-grow-1 pt-4">
                <div style="font-size: 3rem">@(ViewModel.CurrentFieldName + ": ?")</div>
              </div>
            }
            @if (!ViewModel.IsShowingSolution && ViewModel?.Current?.Field?.CardFieldDefinition?.ShowInputForPractice == true)
            {
              <div class="d-flex justify-content-center">
                <div class="input-group mb-3 col flex-fill" style="width: unset; padding: 0px; margin-top: 10px; margin-bottom: 10px;">
                  <div class="input-group-prepend">
                    <span class="input-group-text fieldLabel @ViewModel.ValidationClass">Answer</span>
                  </div>
                  <input type="text" class="form-control" @onkeypress="KeyPressed" @bind="ViewModel.InputText" @bind:event="oninput" id="input"/>
                  <div class="input-group-append">
                    <button style="padding-top: 8px; padding-bottom: 4px;" class="btn btn-secondary" type="button" id="button-addon2" @onclick="ViewModel.OnInputFinished">
                      <span class="oi oi-chevron-right" aria-hidden="true"></span>
                    </button>
                  </div>
                </div>
              </div>
              JSRuntime.InvokeVoidAsync("utilities.focusElement", "input");
            }
          </div>
        }
      </div>
      <div class="card-footer">
        <div class="d-flex justify-content-center">
          @if (ViewModel.IsSummary)
          {
            <Button Command="ViewModel.CloseSummaryCommand" Id="closeSummaryButton" Classes="btn-lg ml-1 mr-1 btn-secondary"></Button>
          }
          else if (ViewModel.IsShowingSolution && ViewModel?.Current?.Field?.CardFieldDefinition?.ShowInputForPractice == false)
          {
            <Button Command="ViewModel.DoesNotKnowResultCommand" Classes="btn-lg ml-1 mr-1 btn-secondary"></Button>
            <Button Command="ViewModel.DifficultResultCommand" Classes="btn-lg ml-1 mr-1 btn-secondary"></Button>
            <Button Command="ViewModel.EasyResultCommand" Classes="btn-lg ml-1 mr-1 btn-secondary"></Button>
          }
          else if (ViewModel.IsShowingSolution && ViewModel?.Current?.Field?.CardFieldDefinition?.ShowInputForPractice == true)
          {
            <Button Command="ViewModel.NextCommand" Id="nextButton" Classes="btn-lg ml-1 mr-1 btn-secondary"></Button>
          }
          else if (ViewModel?.Current?.Field?.CardFieldDefinition?.ShowInputForPractice == false)
          {
            <Button Command="ViewModel.ShowSolutionCommand" Id="showSolutionButton" Classes="btn-lg ml-1 mr-1 btn-secondary"></Button>
          }
        </div>
      </div>
    </WaitSpinner>
  </div>
</ViewModelArea>

<style>
  .right {
    color: #28a745;
  }

  .hard {
    color: #f39c12
  }

  .wrong {
    color: #dc3545
  }

  .custom-li {
    border-top-width: 0px;
    border-bottom-width: 1px;
    margin-bottom: 0px;
  }
</style>

@code
{
  /// <summary>
  /// Id of the Deck
  /// </summary>
  [Parameter]
  public object Id { set => ViewModel.LoadEntity(value); }

  private void KeyPressed(KeyboardEventArgs e)
  {
    if (e.Key == "Enter")
      ViewModel.OnInputFinished();
  }

  ///<inheritdoc/>
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if (ViewModel.IsSummary)
      await JSRuntime.InvokeVoidAsync("utilities.focusElement", "closeSummaryButton");
    else if (!ViewModel.IsShowingSolution && ViewModel?.Current?.Field?.CardFieldDefinition?.ShowInputForPractice == true)
      await JSRuntime.InvokeVoidAsync("utilities.focusElement", "input");
    else if (ViewModel.IsShowingSolution && ViewModel?.Current?.Field?.CardFieldDefinition?.ShowInputForPractice == true)
      await JSRuntime.InvokeVoidAsync("utilities.focusElement", "nextButton");
    else if (ViewModel?.Current?.Field?.CardFieldDefinition?.ShowInputForPractice == false)
      await JSRuntime.InvokeVoidAsync("utilities.focusElement", "showSolutionButton");
  }
}