@page "/Decks/{Id:long}/Practice/"

@using SpacedRepetitionSystem.ViewModels.Cards;
@using SpacedRepetitionSystem.Components.Interaction;
@using SpacedRepetitionSystem.Components.Edits;
@using SpacedRepetitionSystem.Components.ViewModels;
@using SpacedRepetitionSystem.Components.Data;
@using SpacedRepetitionSystem.Components.Containers

@inherits PageBase<PracticeDeckViewModel>

  <ViewModelArea ViewModel="ViewModel">
    <TabCard Title="@ViewModel?.Title" IsLoading="IsLoading || ViewModel.IsLoading" BodyClass="d-flex">
      <HeaderButtons>
        <Button Command="@ViewModel?.CloseCommand" IsIconButton="true" TextColor="#e74c3c"></Button>
      </HeaderButtons>
      <ChildContent>
        @if (ViewModel.IsSummary)
        {
          <div class="d-flex flex-grow-1 summary-element flex-column justify-content-center align-items-center">
            <h3 class="mb-4">Practice Results</h3>
            <CustomPieChart TItem="int" IsVisible="chartVisible" Labels="chartLabels" Values="resultValues" BackgroundColors="backgroundColors" BorderColors="borderColors" Label="chartTitle"></CustomPieChart>
          </div>
          <div class="d-flex flex-column flex-grow-1 summary-element scrollable">
            <div class="d-flex flex-grow-1 flex-row mr-4">
              <ul class="list-group list-group-flush jus" style="width:100%">
                @foreach (var item in ViewModel.PracticeResults)
                {
                  <li class="list-group-item custom-li mt-2">
                    <div class="d-flex row justify-content-between">
                      <div class="d-flex col">
                        <label>Card - @item.Key</label>
                      </div>
                      <div class="d-flex justify-content-center ml-4 col">
                        <label class="right">@item.Value.Correct</label>
                      </div>
                      <div class="d-flex justify-content-center col">
                        <label class="hard">@item.Value.Difficult</label>
                      </div>
                      <div class="d-flex justify-content-center col">
                        <label class="wrong">@item.Value.Wrong</label>
                      </div>
                    </div>
                  </li>
                  @foreach (var subItem in item.Value.FieldResults)
                  {
                    <li class="list-group-item ml-4 custom-li">
                      <div class="d-flex row justify-content-between">
                        <div class="d-flex col">
                          <label>@subItem.Key</label>
                        </div>
                        <div class="d-flex justify-content-center col">
                          <label class="right">@subItem.Value.Correct</label>
                        </div>
                        <div class="d-flex justify-content-center col">
                          <label class="hard">@subItem.Value.Difficult</label>
                        </div>
                        <div class="d-flex justify-content-center col">
                          <label class="wrong">@subItem.Value.Wrong</label>
                        </div>
                      </div>
                    </li>
                  }
                }
              </ul>
            </div>
          </div>
        }
        else
        {
          <div class="d-flex mt-4 flex-column flex-grow-1" style="padding: 20px">
            <div class="d-flex justify-content-center">
              <div style="font-size: 1.5rem" class="@ViewModel.ValidationClass">@(ViewModel.IsShowingSolution ? ViewModel.CurrentFieldName : ViewModel.DisplayedFieldName)</div>
            </div>
            <div class="d-flex justify-content-center">
              <div style="font-size: 3rem" class="@ViewModel.ValidationClass">@(ViewModel.IsShowingSolution ? ViewModel.Solution : ViewModel.DisplayedFieldValue)</div>
            </div>
            @if (!ViewModel.IsShowingSolution)
            {
              <div class="d-flex justify-content-center flex-grow-1 pt-4">
                <div style="font-size: 3rem">@(ViewModel.CurrentFieldName + ": ?")</div>
              </div>
            }
            @if (!ViewModel.IsShowingSolution && ViewModel?.Current?.CardFieldDefinition?.ShowInputForPractice == true)
            {
              <div class="d-flex justify-content-center">
                <TextEdit Caption="Answer" @bind-Value="ViewModel.InputText" ButtonAction="ViewModel.OnInputFinished" EnterAction="ViewModel.OnInputFinished" Id="answerEdit" IsFocued="true">
                  <button style="padding-top: 8px; padding-bottom: 4px;" class="btn bg-dark" type="button" id="button-addon2" @onclick="ViewModel.OnInputFinished">
                    <span class="oi oi-chevron-right text-white" aria-hidden="true"></span>
                  </button>
                </TextEdit>
              </div>
            }
          </div>
        }
      </ChildContent>
      <CardFooter>
        <div class="d-flex justify-content-center">
          @if (ViewModel.IsSummary)
          {
            <Button Command="ViewModel.CloseSummaryCommand" Id="closeSummaryButton" Class="btn-lg ml-1 mr-1 btn-secondary" IsFocued="true"></Button>
          }
          else if (ViewModel.IsShowingSolution && ViewModel?.Current?.CardFieldDefinition?.ShowInputForPractice == false)
          {
            <Button Command="ViewModel.DoesNotKnowResultCommand" Class="btn-lg ml-1 mr-1 btn-secondary"></Button>
            <Button Command="ViewModel.DifficultResultCommand" Class="btn-lg ml-1 mr-1 btn-secondary"></Button>
            <Button Command="ViewModel.EasyResultCommand" Class="btn-lg ml-1 mr-1 btn-secondary"></Button>
          }
          else if (ViewModel.IsShowingSolution && ViewModel?.Current?.CardFieldDefinition?.ShowInputForPractice == true)
          {
            <Button Command="ViewModel.NextCommand" Id="nextButton" Class="btn-lg ml-1 mr-1 btn-secondary" IsFocued="true"></Button>
          }
          else if (ViewModel?.Current?.CardFieldDefinition?.ShowInputForPractice == false)
          {
            <Button Command="ViewModel.ShowSolutionCommand" Id="showSolutionButton" Class="btn-lg ml-1 mr-1 btn-secondary" IsFocued="true"></Button>
          }
        </div>
      </CardFooter>
    </TabCard>
  </ViewModelArea>

<style>
  .custom-li {
    border-top-width: 0px;
    border-bottom-width: 1px;
    margin-bottom: 0px;
  }

  .summary-element {
    width: 50%;
    overflow-y: auto;
  }

  @@media (max-width: 1200px) {
    .summary-element {
      width: 100%;
      overflow-y: unset;
      margin-top: 2em;
      margin-bottom: 2em;
    }

    .card-body {
      flex-direction: column !important;
    }
  }
</style>

@code
{
  private bool chartVisible = false;
  private string[] chartLabels = { "Correct/Easy", "Hard", "Wrong" };
  private List<string> borderColors = new List<string>() { "#88d5d5", "#ffa854", "#ffa1b5" };
  private List<string> backgroundColors = new List<string>() { "#dbf2f2", "#ffecd9", "#ffe0e6" };
  private List<int> resultValues = new List<int>();

  /// <summary>
  /// Id of the Deck
  /// </summary>
  [Parameter]
  public object Id { set => ViewModel.Id = value; }

  ///<inheritdoc/>
  protected override void OnParametersSet()
  {
    base.OnParametersSet();
    ViewModel.PropertyChanged += (sender, e) =>
    {
      if (e.PropertyName == nameof(ViewModel.IsSummary) && ViewModel.IsSummary == true)
      {
        resultValues.Add(ViewModel.PracticeResults.Values.Sum(value => value.Correct));
        resultValues.Add(ViewModel.PracticeResults.Values.Sum(value => value.Difficult));
        resultValues.Add(ViewModel.PracticeResults.Values.Sum(value => value.Wrong));
      }
      chartVisible = true;
    };
  }
}