@page "/Decks"

@using SpacedRepetitionSystem.Components.ViewModels;
@using SpacedRepetitionSystem.Entities.Entities.Cards;
@using SpacedRepetitionSystem.ViewModels.Cards;
@using SpacedRepetitionSystem.Components.Interaction;
@using SpacedRepetitionSystem.Components.Containers;
@using Blazorise.DataGrid;

@inherits SearchPageBase<Deck, DeckSearchViewModel>

  <ViewModelArea ViewModel="@ViewModel">
    <TabCard Title="@ViewModel?.Title"
             IsLoading="ViewModel.IsSearching">
      <HeaderButtons>
        <Button Command="@ViewModel?.CloseCommand" IsIconButton="true" TextColor="#e74c3c"></Button>
      </HeaderButtons>
      <ChildContent>
        <div class="row">
          <TextEdit Caption="Search" @bind-Value="ViewModel.SearchText" IsFocued="true" EnterAction="async () => await ViewModel.SearchAsync()">
            <button style="padding-top: 8px; padding-bottom: 4px;" class="btn bg-dark" type="button" id="button-addon2" @onclick="ViewModel.SearchAsync">
              <span class="oi oi-magnifying-glass text-white" aria-hidden="true"></span>
            </button>
          </TextEdit>
        </div>
        <SearchGrid TItem="Deck"
                    Items="@ViewModel.SearchResults"
                    @bind-SelectedItem="@ViewModel.SelectedEntity"
                    PageSize="12"
                    ShowPager="true"
                    DeleteCommand="@ViewModel.DeleteCommand"
                    EditCommand="@ViewModel.EditCommand"
                    NewCommand="@ViewModel.NewCommand">
          <Columns>
            <DataGridColumn TItem="Deck" Width="120"
                            Field="@nameof(Deck.DeckId)"
                            Caption="#" Sortable="true">
              <DisplayTemplate>
                <a href="@("/Decks/" + @context.DeckId)">@context.DeckId</a>
              </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Deck"
                            Field="@nameof(Deck.Title)"
                            Caption="Title" Sortable="true" />
            <DataGridColumn TItem="Deck"
                            Field="@nameof(Deck.CardCount)" TextAlignment="@Blazorise.TextAlignment.Center"
                            Caption="Cards" Sortable="false" Width="50" />
            <DataGridColumn TItem="Deck"
                            Field="@nameof(Deck.DueCardCount)" TextAlignment="@Blazorise.TextAlignment.Center"
                            Caption="Due Cards" Sortable="false" Width="110"></DataGridColumn>
            <DataGridColumn TItem="Deck"
                            Field="@nameof(Deck.IsPinned)" TextAlignment="@Blazorise.TextAlignment.Center"
                            Caption="" Width="50" Sortable="false">
              <DisplayTemplate>
                @{
                  <ToggleButton ActiveIcon="fas fa-thumbtack" Value="@context.IsPinned" ActionParameter="@context" ToggleAction="(value, param) => ViewModel.TogglePinned(value, param as Deck)"
                                ActiveIconColor="#5DB761" NotActiveIconColor="#505c69" Style="padding: 0px; margin: -2px; font-size: 1.3em; transform: rotate(25deg);" />
                }
              </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Deck" Width="100"
                            Field="@nameof(Deck.DeckId)"
                            Caption="" Sortable="false">
              <DisplayTemplate>
                @{
                  <Button CommandParameter="context.DeckId" Class="grid-edit-button column-button" Command="ViewModel.PracticeDeckCommand"></Button>
                }
              </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Deck" Width="130"
                            Field="@nameof(Deck.DeckId)"
                            Caption="" Sortable="false">
              <DisplayTemplate>
                @{
                  <Button CommandParameter="(context as Deck).DeckId" Class="grid-new-button column-button" Command="ViewModel.AddCardCommand"></Button>
                }
              </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Deck" Width="100"
                            Field="@nameof(Deck.DeckId)"
                            Caption="" Sortable="false">
              <DisplayTemplate>
                @{
                  <Button CommandParameter="context" Class="grid-edit-button column-button" Command="ViewModel.ShowStatisticsCommand"></Button>
                }
              </DisplayTemplate>
            </DataGridColumn>
          </Columns>
        </SearchGrid>
      </ChildContent>
    </TabCard>
  </ViewModelArea>

@code
{
  ///<inheritdoc/>
  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    await ViewModel.SearchAsync();
  }
}