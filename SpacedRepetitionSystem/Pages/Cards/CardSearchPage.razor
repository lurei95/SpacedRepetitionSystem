@page "/Cards"
@page "/Decks/{DeckId:long}/Cards"

@using SpacedRepetitionSystem.Components.ViewModels;
@using SpacedRepetitionSystem.Components.ViewModels.Cards;
@using SpacedRepetitionSystem.Components.Interaction;
@using Blazorise.DataGrid;

@inherits SearchPageBase<SpacedRepetitionSystem.Entities.Entities.Cards.Card, CardSearchViewModel>

<ViewModelArea ViewModel="@ViewModel">
  <div class="card flex-grow-0 fullsizeCard">
    <div class="card-header">
      <div class="row">
        <div class="col col-md-auto">
          Search Cards
        </div>
        <div class="col d-flex justify-content-end">
          <Button Command="@ViewModel?.CloseCommand" IsIconButton="true" TextColor="#e74c3c"></Button>
        </div>
      </div>
    </div>
    <div class="card-body scrollable">
      <WaitSpinner Visible="ViewModel.IsSearching">
        <DataGrid TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card"
                  Data="@ViewModel.SearchResults" ShowPager="true"
                  @bind-SelectedRow="@ViewModel.SelectedEntity" Editable="true"
                  Striped="true" Bordered="true" Hoverable="true"
                  PageSize="12">
          <DataGridCommandColumn TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card" Width="160px">
            <EditCommandTemplate>
              <Button Class="grid-edit-button" CommandParameter="@context.Item" Command="@ViewModel?.EditCommand" Style="margin-top: -5px; margin-bottom: -5px"></Button>
            </EditCommandTemplate>
            <DeleteCommandTemplate>
              <Button Class="grid-delete-button" CommandParameter="@context.Item" Command="@ViewModel?.DeleteCommand" Style="margin-top: -5px; margin-bottom: -5px"></Button>
            </DeleteCommandTemplate>
            <NewCommandTemplate>
              <Button Class="grid-new-button" Command="@ViewModel?.NewCommand" Style="margin-top: -5px; margin-bottom: -5px"></Button>
            </NewCommandTemplate>
          </DataGridCommandColumn>
          <DataGridColumn TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card"
                          Field="@nameof(SpacedRepetitionSystem.Entities.Entities.Cards.Card.CardId)"
                          Caption="#" Sortable="true" />
          <DataGridColumn TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card"
                          Field="@nameof(SpacedRepetitionSystem.Entities.Entities.Cards.Card.CardId)"
                          Caption="Deck" Sortable="true">
            <DisplayTemplate>
              @{
                @($"{context.Deck.Title}")
              }
            </DisplayTemplate>
          </DataGridColumn>
          <DataGridColumn TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card"
                          Field="@nameof(SpacedRepetitionSystem.Entities.Entities.Cards.Card.Fields)"
                          Caption="Field 1" Sortable="false">
            <DisplayTemplate>
              @{
                string value = (context as SpacedRepetitionSystem.Entities.Entities.Cards.Card)?.Fields[0].FieldName;
                if (!string.IsNullOrEmpty(value))
                  @($"{value}")
              }
            </DisplayTemplate>
          </DataGridColumn>
          <DataGridColumn TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card"
                          Field="@nameof(SpacedRepetitionSystem.Entities.Entities.Cards.Card.Fields)"
                          Caption="Field 2" Sortable="false">
            <DisplayTemplate>
              @{
                string value = (context as SpacedRepetitionSystem.Entities.Entities.Cards.Card)?.Fields[1].FieldName;
                if (!string.IsNullOrEmpty(value))
                  @($"{value}")
              }
            </DisplayTemplate>
          </DataGridColumn>
          <DataGridColumn TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card"
                          Field="@nameof(SpacedRepetitionSystem.Entities.Entities.Cards.Card.Fields)"
                          Caption="Field 3" Sortable="false">
            <DisplayTemplate>
              @{
                SpacedRepetitionSystem.Entities.Entities.Cards.Card card = context as SpacedRepetitionSystem.Entities.Entities.Cards.Card;
                if (card != null)
                {
                  string value = card.Fields.Count > 2 ? card.Fields[2].FieldName : String.Empty;
                  if (!string.IsNullOrEmpty(value))
                    @($"{value}")
                  }
              }
            </DisplayTemplate>
          </DataGridColumn>
        </DataGrid>
      </WaitSpinner>
    </div>
  </div>
</ViewModelArea>

@code
{
  /// <summary>
  /// Id of the deck
  /// </summary>
  [Parameter]
  public long? DeckId { set => ViewModel.DeckId = value; }

  ///<inheritdoc/>
  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    await ViewModel.Search();
  }
}
