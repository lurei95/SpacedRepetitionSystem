@page "/Cards"
@page "/Decks/{DeckId:long}/Cards"

@using SpacedRepetitionSystem.Components.ViewModels;
@using SpacedRepetitionSystem.ViewModels.Cards;
@using SpacedRepetitionSystem.Components.Interaction;
@using Blazorise.DataGrid;
@using SpacedRepetitionSystem.Entities.Entities.Cards;
@using SpacedRepetitionSystem.Components.Containers;
@using SpacedRepetitionSystem.Entities;

@inherits SearchPageBase<SpacedRepetitionSystem.Entities.Entities.Cards.Card, CardSearchViewModel>

  <ViewModelArea ViewModel="@ViewModel">
    <TabCard Title="@ViewModel?.Title"
             IsLoading="IsLoading">
      <HeaderButtons>
        <Button Command="@ViewModel?.CloseCommand" IsIconButton="true" TextColor="#e74c3c"></Button>
      </HeaderButtons>
      <ChildContent>
        <div class="row">
          <TextEdit Caption="@UIStrings.Search" @bind-Value="ViewModel.SearchText" IsFocued="true" EnterAction="async () => await ViewModel.SearchAsync()">
            <button style="padding-top: 8px; padding-bottom: 4px;" class="btn bg-dark" type="button" id="button-addon2" @onclick="ViewModel.SearchAsync">
              <span class="oi oi-magnifying-glass text-white" aria-hidden="true"></span>
            </button>
          </TextEdit>
          <DropDownEdit Caption="@(EntityNameHelper.GetName<Deck>())" SelectableValues="ViewModel.AvailableDecks" @bind-Value="ViewModel.SelectedDeckTitle" IsEnabled="ViewModel.DeckSelectable"></DropDownEdit>
        </div>
        <SearchGrid TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card"
                    Items="@ViewModel.SearchResults"
                    @bind-SelectedItem="@ViewModel.SelectedEntity"
                    PageSize="11"
                    WaitSpinnerVisible="ViewModel.IsSearching"
                    ShowPager="true"
                    DeleteCommand="@ViewModel.DeleteCommand"
                    EditCommand="@ViewModel.EditCommand"
                    NewCommand="@ViewModel.NewCommand">
          <Columns>
            <DataGridColumn TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card" Width="120"
                            Field="@nameof(SpacedRepetitionSystem.Entities.Entities.Cards.Card.CardId)"
                            Caption="#" Sortable="true">
              <DisplayTemplate>
                <a href="@("/Cards/" + @context.CardId)">@context.CardId</a>
              </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card"
                            Field="@nameof(SpacedRepetitionSystem.Entities.Entities.Cards.Card.DeckId)"
                            Caption="@(EntityNameHelper.GetName<Deck>())" Sortable="true">
              <DisplayTemplate>
                <a href="@("/Decks/" + @context.DeckId)">@context.Deck.Title</a>
              </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card"
                            Field="@nameof(SpacedRepetitionSystem.Entities.Entities.Cards.Card.Fields)"
                            Caption="@UIStrings.Field_1" Sortable="false">
              <DisplayTemplate>
                @{
                  string value = (context as SpacedRepetitionSystem.Entities.Entities.Cards.Card)?.Fields[0].FieldName;
                  if (!string.IsNullOrEmpty(value))
                    @($"{value}")
                }
              </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card"
                            Field="@nameof(SpacedRepetitionSystem.Entities.Entities.Cards.Card.Fields)"
                            Caption="@UIStrings.Field_2" Sortable="false">
              <DisplayTemplate>
                @{
                  string value = (context as SpacedRepetitionSystem.Entities.Entities.Cards.Card)?.Fields[1].FieldName;
                  if (!string.IsNullOrEmpty(value))
                    @($"{value}")
                }
              </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card"
                            Field="@nameof(SpacedRepetitionSystem.Entities.Entities.Cards.Card.Fields)"
                            Caption="@UIStrings.Field_3" Sortable="false">
              <DisplayTemplate>
                @{
                  SpacedRepetitionSystem.Entities.Entities.Cards.Card card = context as SpacedRepetitionSystem.Entities.Entities.Cards.Card;
                  if (card != null)
                  {
                    string value = card.Fields.Count > 2 ? card.Fields[2].FieldName : String.Empty;
                    if (!string.IsNullOrEmpty(value))
                      @($"{value}")
                    }
                }
              </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="SpacedRepetitionSystem.Entities.Entities.Cards.Card" Width="100" HeaderCellClass="command-cell"
                            Field="@nameof(SpacedRepetitionSystem.Entities.Entities.Cards.Card.CardId)"
                            Caption="" Sortable="false" CellClass="@((item) => "command-cell")">
              <DisplayTemplate>
                @{
                  <Button CommandParameter="context" Class="grid-edit-button column-button" Command="ViewModel.ShowStatisticsCommand"></Button>
                }
              </DisplayTemplate>
            </DataGridColumn>
          </Columns>
          <ContextActions>
            <div class="dropdown-divider"></div>
            <div class="dropdown-header">@UIStrings.Practice</div>
            <Button Command="@ViewModel.ShowStatisticsCommand" CommandParameter="@context.DeckId" Class="dropdown-item"></Button>
          </ContextActions>
        </SearchGrid>
      </ChildContent>
    </TabCard>
  </ViewModelArea>

@code
{
  /// <summary>
  /// Id of the deck
  /// </summary>
  [Parameter]
  public long? DeckId { set => ViewModel.DeckId = value; }

  ///<inheritdoc/>
  protected override async Task OnInitializedAsync()
  { await base.OnInitializedAsync(); }
}
