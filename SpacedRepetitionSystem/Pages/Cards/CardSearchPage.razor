@page "/Cards"

@using SpacedRepetitionSystem.Components.ViewModels;
@using SpacedRepetitionSystem.Entities.Entities.Cards;
@using SpacedRepetitionSystem.Components.ViewModels.Cards;
@using SpacedRepetitionSystem.Components.Interaction;

@inherits SearchPageBase<Card, CardSearchViewModel>

<ViewModelArea ViewModel="@ViewModel">
  <div class="card flex-grow-0 fullsizeCard">
    <div class="card-header">
      Search Cards
    </div>
    <div class="card-body scrollable">
      <WaitSpinner Visible="ViewModel.IsSearching">
        <table id="dtBasicExample" class="table table-striped table-bordered" cellspacing="0" width="100%">
          <thead>
            <tr>
              <th class="th-sm">
                ID
              </th>
              <th class="th-sm">
                Deck
              </th>
              <th class="th-sm">
                Field 1
              </th>
              <th class="th-sm">
                Field 2
              </th>
              <th class="th-sm">
                Field 3
              </th>
            </tr>
          </thead>
          <tbody>
            @foreach (var item in ViewModel.SearchResults)
            {
              <tr>
                <td><a href="/Cards/@item.CardId">@item.CardId</a></td>
                <td><a href="/Decks/@item.DeckId">@item.Deck?.Title</a></td>
                <td>@item.Fields[0].FieldName</td>
                <td>@item.Fields[1].FieldName</td>
                <td>@item.Fields.Count > 2 ? item.Fields[2].FieldName : null</td>
              </tr>
            }
          </tbody>
        </table>
      </WaitSpinner>
    </div>
  </div>
</ViewModelArea>

@code
{
  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    await ViewModel.Search();
  }
}
