@using SpacedRepetitionSystem.Components.Navigation;
@using SpacedRepetitionSystem.ViewModels.Identity;
@using SpacedRepetitionSystem.Entities.Entities.Cards;
@using SpacedRepetitionSystem.Entities;

@inject AuthenticationStateProvider AuthenticationProvider;

<div class="top-row bg-dark d-flex" style="padding-left: unset !important; border: 0px; z-index: 1;">
  @if (IsLoggedIn)
  {
    <div class="dropdown menu-button">
      <button class="menu-button btn" style="background: #1d2024!important;" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-offset="-10,0">
        <span class="oi oi-menu menu-button-icon text-white"></span>
      </button>
      <div class="dropdown-menu" aria-labelledby="dropdownMenu1">
        <div class="dropdown-header">@UIStrings.MainTabTitle</div>
        <a class="dropdown-item" href="/">@UIStrings.Home</a>
        <div class="dropdown-divider"></div>
        <div class="dropdown-header">@(EntityNameHelper.GetPluralName<Deck>())</div>
        <a class="dropdown-item" href="/Decks/New">@UIStrings.AddDeck</a>
        <a class="dropdown-item" href="/Decks">@UIStrings.SearchDecks</a>
        <div class="dropdown-divider"></div>
        <div class="dropdown-header">@(EntityNameHelper.GetPluralName<Card>())</div>
        <a class="dropdown-item" href="/Cards">@UIStrings.SearchCards</a>
        <a class="dropdown-item" href="/Templates/New">@UIStrings.AddTemplate</a>
        <a class="dropdown-item" href="/Templates">@UIStrings.SearchTemplates</a>
      </div>
    </div>
    <div class="px-3 bg-dark" style="height: 100%; width: 250px; padding: 1rem; background: #1d2024 !important;">
      <div class="media d-flex align-items-center">
        <div class="media-body text-white" style="padding-left: 1rem">
          <h5 class="m-0">Repetition System</h5>
        </div>
      </div>
    </div>
  }
  else
  {
    <div class="px-3 bg-dark title" style="height: 100%; width: 250px; padding: 1rem;">
      <div class="media d-flex align-items-center">
        <div class="media-body text-white" style="padding-left: 1rem">
          <h5 class="m-0">Repetition System</h5>
        </div>
      </div>
    </div>
  }
  <div class="flex-fill pl-2" style="padding-top:15px;">
    @if (IsLoggedIn)
    {
      <div class="bread-crumb-container">
        <BreadCrumb></BreadCrumb>
      </div>
    }
  </div>
  <div class="pr-2 row d-flex align-content-center align-items-center">
    @if (IsLoggedIn)
    {
      <button @onclick="async () => await (AuthenticationProvider as CustomAuthenticationStateProvider).MarkUserAsLoggedOut()" 
              class="nav-link btn btn-link text-white ml-2 mr-2">@UIStrings.Logout</button>
    }
    else
    {
      <a href="/Signup" class="text-white ml-2 mr-2">@UIStrings.Signup</a>
      <a href="/Login" class="text-white ml-2 mr-2">@UIStrings.Logout</a>
    }
  </div>
</div>

<style>
  .menu-button {
    height: 100%;
  }

  .top-row {
    padding-right: 1.5rem !important
  }

  .menu-button-icon {
    font-size: 1.25rem;
    padding-top: 0.25em;
    padding-left: 0.15em;
    padding-right: 0.15em;
  }

  .dropdown-menu {
    margin-top: 0px;
    margin-left: -5px;
  }

  @@media (min-width: 1200px) {
    .menu-button {
      display: none !important;
    }
  }

  @@media (max-width: 1200px) {
    .title {
      display: none !important;
    }

    .bread-crumb-container {
      display: none;
    }

    .top-row {
      background: #1d2024 !important;
    }
  }
</style>

@code
{
  /// <summary>
  /// Whether the user is logged in
  /// </summary>
  [Parameter]
  public bool IsLoggedIn { get; set; }
}
